{% fetchxml webRolesFetch %}
<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false">
  <entity name="adx_webrole">
    <order attribute="createdon" descending="false" />
    <filter type="and">
      <condition attribute="adx_anonymoususersrole" operator="eq" value="0" />
      <condition attribute="adx_authenticatedusersrole" operator="eq" value="0" />
    </filter>
  </entity>
</fetch>
{% endfetchxml %}

{% assign webRoles = webRolesFetch.results.entities %}

{% fetchxml adminContactFetch %}
<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="true">
  <entity name="contact">
    <filter type="and">
      <condition attribute="contactid" operator="eq" value="{{user.id}}" />
    </filter>
    <link-entity name="adx_webrole_contact" from="contactid" to="contactid" visible="false" intersect="true">
      <link-entity name="adx_webrole" from="adx_webroleid" to="adx_webroleid" alias="ai">
        <filter type="and">
          <condition attribute="adx_webroleid" operator="eq" value="{{webRoles[0].id}}" />
        </filter>
      </link-entity>
    </link-entity>
  </entity>
</fetch>
{% endfetchxml %}

{% assign adminContact = adminContactFetch.results.entities %}

{% if adminContact.size > 0 %}
    <div class="container">
      <div class="modal fade" id="MAL-PCN-Modal" role="dialog">
        <div class="modal-dialog" style="width: 700px">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal">&times;</button>
              <h4 class="modal-title">Page Components Navigator</h4>
            </div>
            <div id="MAL-PCN-Modal-Body" class="modal-body">
              <div id="malPcnComponentsTree" class="treeview">Loading...</div> 
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
          </div>      
        </div>
      </div>  
    </div>

    <script>

      //Web API ajax wrapper
      (function (webapi, $) {
          function safeAjax(ajaxOptions) {
              var deferredAjax = $.Deferred();
              shell.getTokenDeferred().done(function (token) {
                  // Add headers for ajax
                  if (!ajaxOptions.headers) {
                      $.extend(ajaxOptions, {
                          headers: {
                              "__RequestVerificationToken": token
                          }
                      });
                  } else {
                      ajaxOptions.headers["__RequestVerificationToken"] = token;
                  }
                  $.ajax(ajaxOptions)
                      .done(function (data, textStatus, jqXHR) {
                          validateLoginSession(data, textStatus, jqXHR, deferredAjax.resolve);
                      }).fail(deferredAjax.reject); //ajax
              }).fail(function () {
                  deferredAjax.rejectWith(this, arguments); // On token failure pass the token ajax and args
              });
              return deferredAjax.promise();
          }
          webapi.safeAjax = safeAjax;
      })(window.webapi = window.webapi || {}, jQuery)

      // Once admin bar is rendered, add PCN and Metadata Buttons
      let waitForAdminBar = setInterval(function () {
        let adminBar = document.querySelectorAll('.yui-skin-sam .bd')[0];
        $(adminBar).parent().css('width','120px');
        if (adminBar) {
          let pcnButtonDiv = document.createElement('div');
          pcnButtonDiv.setAttribute('class', 'xrm-editable-toolbar-module');
          pcnButtonDiv.innerHTML =       
              `<span id="malOpenPCN" class="yui-button yui-push-button">
                <span class="first-child">
                  <button id="malBtnPCN" style="width: 100%; text-align: left" type="button" data-toggle="modal" data-target="#MAL-PCN-Modal">
                    PCN
                  </button>
                </span>
              </span>`;
          adminBar.append(pcnButtonDiv);

          let mdtaEditButtonDiv = document.createElement('div');
          mdtaEditButtonDiv.setAttribute('class', 'xrm-editable-toolbar-module hidden');
          mdtaEditButtonDiv.innerHTML =       
              `<span id="malOpenMdta" class="yui-button yui-push-button">
                <span class="first-child">
                  <button id="malBtnEditMdta" style="width: 100%; text-align: left" type="button">
                    <span class="fa fa-external-link"></span>
                    <span id="malSpanCreateMdta">Open Mdta</span>
                  </button>
                </span>
              </span>`;    

          // Open Mdta URL on click of Mdta button
          adminBar.append(mdtaEditButtonDiv);
          $('#malBtnEditMdta').click(function() {
            window.open($(this).data('url'));
            $('#malOpenMdta').parent().addClass('hidden');
          });

          let mdtaCreateButtonDiv = document.createElement('div');
          mdtaCreateButtonDiv.setAttribute('class', 'xrm-editable-toolbar-module hidden');
          mdtaCreateButtonDiv.innerHTML =       
              `<span id="malCreateMdta" class="yui-button yui-push-button">
                <span class="first-child">
                  <button id="malBtnCreateMdta" style="width: 100%; text-align: left" type="button">
                    <span class="fa fa-plus-circle" aria-hidden="true"></span>
                    <span class="fa fa-spinner fa-spin hide" aria-hidden="true" style="display: inline-block"></span>
                    <span id="malSpanCreateMdta">Create Mdta</span>
                  </button>
                </span>
              </span>`; 

          adminBar.append(mdtaCreateButtonDiv);
          $('#malBtnCreateMdta').click(function() {
            const formid = $(this).data('metadataParentFormId');
            const metadataTypelogicalName = $(this).data('isEntityForm') == 'true' ? 'adx_entityformmetadata' : 'adx_webformmetadata';
            const formTypeLogicalName = $(this).data('isEntityForm') == 'true' ? 'adx_entityform' : 'adx_webformstep';
            let json = {
              "adx_type": 100000000,
              "adx_attributelogicalname": $(this).data('metadataLogicalName'),
            };

            json[`${formTypeLogicalName}@odata.bind`] = `${formTypeLogicalName}s(${formid})`;    

            $(this).find('span#malSpanCreateMdta').css('cursor', 'not-allowed !important');
            $(this).find('.fa.fa-plus-circle').addClass('hide');
            $(this).find('.fa.fa-spinner.fa-spin').removeClass('hide');
            $(this).find('span#malSpanCreateMdta').html(' Processing');
            $(this).prop('disabled', true);
            webapi.safeAjax({
                type: "POST",
                url: `/_api/${metadataTypelogicalName}s`,
                contentType: "application/json",
                data: JSON.stringify(json),
                success: function (res, status, xhr) {
                    {% assign environmentURL = settings["MAL.PCN.EnvironmentURL"] %}
                    {% if environmentURL contains 'appid' %}
                        {% assign environmentURL = environmentURL | append: '&pagetype=entityrecord' %}
                    {% else %}
                        {% assign environmentURL = environmentURL | append: '/main.aspx?pagetype=entityrecord' %}
                    {% endif %}

                    $('#malBtnCreateMdta').find('.fa.fa-plus-circle').removeClass('hide');
                    $('#malBtnCreateMdta').find('.fa.fa-spinner.fa-spin').addClass('hide');
                    $('#malBtnCreateMdta').find('span#malSpanCreateMdta').html("Create Mdta");
                    $('#malBtnCreateMdta').find('span#malSpanCreateMdta').css('cursor', 'pointer');
                    $('#malBtnCreateMdta').prop('disabled', false);
                    $('#malCreateMdta').data('metadataId', '');
                    $('#malCreateMdta').parent().addClass('hidden');

                    window.open(`{{environmentURL}}&etn=${metadataTypelogicalName}&id=${xhr.getResponseHeader("entityid")}`, '_blank')
                }
            });
          });

          // Clear metadataId from Mdta buttons on mouseleave
          $('#malOpenMdta').mouseleave(function() {
            $(this).data('metadataId', '');
          });

          $('#malCreateMdta').mouseleave(function() {
            $(this).data('metadataId', '');
          });

          clearInterval(waitForAdminBar);
        }
      }, 10);

      // Make sure that all links open in new tabs. Tree refreshes with any action
      $('#MAL-PCN-Modal-Body').on('DOMSubtreeModified', '#malPcnComponentsTree', function(){
        $('#MAL-PCN-Modal-Body #malPcnComponentsTree a[href!="#"]').attr('target', '_blank');
      });

      // Treeview script does not offer option to make href targets blank so doing it on mouseover
      $('#MAL-PCN-Modal-Body #malPcnComponentsTree a').mouseover(function () {
        if ($(this).attr('target') != '_blank' && $(this).attr('href') != '#'){
          $(this).attr('target', '_blank');
        }
      });

      // Add shortcut to open PCN with Ctrl + Space
      document.onkeyup = function(e) {
        if (e.ctrlKey && e.which == 32) {
          document.getElementById("malBtnPCN").click();
        } 
      };

      {% substitution %}
      // Get GUID of Web Form being used on the Page record if any
      if ("{{page.adx_webform.id}}") {
        sessionStorage.setItem("MAL.PCN.page_adx_webform_id", "{{page.adx_webform.id}}");
      } else {
        sessionStorage.removeItem("MAL.PCN.page_adx_webform_id");
      }

      // Get GUID of Entity Form being used on the Page record if any
      if ("{{page.adx_entityform.id}}") {
        sessionStorage.setItem("MAL.PCN.page_adx_entityform_id", "{{page.adx_entityform.id}}");
      } else {
        sessionStorage.removeItem("MAL.PCN.page_adx_entityform_id");
      }

      // Get GUID of Entity list being used on the Page record if any
      if ("{{page.adx_entitylist.id}}") {
        sessionStorage.setItem("MAL.PCN.page_adx_entitylist_id", "{{page.adx_entitylist.id}}");
      } else {
        sessionStorage.removeItem("MAL.PCN.page_adx_entitylist_id");
      }

      // Get GUID of current web form step on the page if any
      if ("{{request.params.stepid}}") {
        sessionStorage.setItem("MAL.PCN.request_params_stepid", "{{request.params.stepid}}");
      } else {
        sessionStorage.removeItem("MAL.PCN.request_params_stepid");
      }

      // Get the GUID of the current web page
      sessionStorage.setItem("MAL.PCN.page_adx_webpageid", "{{page.adx_webpageid}}");

      // Get the api endpoint url
      sessionStorage.setItem("MAL.PCN.GetPageComponentsData", "{{ sitemarkers["MAL.PCN.GetPageComponentsData"].url }}");
      {% endsubstitution %}

    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-treeview/1.2.0/bootstrap-treeview.min.js"></script>
    <script id="malPcnJavascriptWrapperScript">
      {% include 'MAL.PCN.PCNJavascript' %}

      /**
       * Sets up direct metadata navigation button on admin control
       * @param inputControl the input control for which the Mdta button will show
       * @param allMetadata metadata returned from api request
       */
      function setUpMdtaButton(inputControl, allMetadata, formIsModal, webForms) {
        let inputId = $(inputControl).attr('id');
        let inputAttributeName = $(inputControl).attr('name');

        // If control is a lookup field
        if ($(inputControl).parent().hasClass('input-group')){
          inputId = $(inputControl).parent().find('input').eq(1).attr('id');
          inputAttributeName = $(inputControl).parent().find('input').eq(1).attr('name')
        }

        // If control is a datetime field
        if ($(inputControl).parent().hasClass('datetimepicker')){
          inputId = $(inputControl).parent().prev().attr('id');
          inputAttributeName = $(inputControl).parent().prev().attr('name');
        }

        // Set up Mdta button and div when an input with metadata comes into focus
        $(inputControl).focus(function () {
          
          // Get if of entity form or webform that contains the field
          let inputFormId = 
            formIsModal ? 
              new URL(`http://test.com${$(inputControl).closest('form').attr('action')}`).searchParams.get('entityformid') : 
             inputAttributeName.includes('EntityFormControl_') ? 
             inputAttributeName.substr(inputAttributeName.search("EntityFormControl_") + 18, 32 ) :
             inputAttributeName.substr(inputAttributeName.search("WebFormControl_") + 15, 32 );

          if (inputFormId.length == 32){
            inputFormId = `${inputFormId.slice(0, 8)}-${inputFormId.slice(8, 12)}-${inputFormId.slice(12, 16)}-${inputFormId.slice(16, 20)}-${inputFormId.slice(20, 32)}`;
          }

          // Get field metadata from json payload. Account for option sets where id ends with _[item number]
          const inputMetadata = allMetadata.filter(m => m.text.endsWith(inputId.replace(/_(\d+)/g,'')) && m.parentId == inputFormId);
          
          if (inputMetadata.length){ // There's already a metadata for the field
            $('#malBtnEditMdta').data('url', inputMetadata[0].href);
            $('#malOpenMdta').parent().removeClass('hidden');
            $('#malOpenMdta').mouseenter(function() {
              $(this).data('metadataId', inputId);
            });
          } else { // There's no metadata for the field, so give the option to create one
            let metadataParentFormId;

            if (inputAttributeName.includes("WebFormControl_")){
              $('#malBtnCreateMdta').data('isEntityForm', 'false');

              if ("{{params.stepid}}") {
                metadataParentFormId = "{{params.stepid}}";   
              } else {
                metadataParentFormId = webForms[0].nodes.filter(wfs => wfs.isStartStep)[0].id;
              }

            } else {
              $('#malBtnCreateMdta').data('isEntityForm', 'true');
              metadataParentFormId = inputFormId;
            }

            $('#malBtnCreateMdta').data('metadataParentFormId', metadataParentFormId);
            $('#malBtnCreateMdta').data('metadataLogicalName', inputId.replace(/_(\d+)/g,''));
            $('#malCreateMdta').parent().removeClass('hidden');
            $('#malCreateMdta').mouseenter(function() {
              $(this).data('metadataId', inputId);
            });
          }
        });

        // Hide Mdta button if focusing on another element
        $(inputControl).focusout(function () {
          if ($('#malOpenMdta').data('metadataId') != inputId) {
            $('#malOpenMdta').parent().addClass('hidden');
          }
          if ($('#malCreateMdta').data('metadataId') != inputId) {
            $('#malCreateMdta').parent().addClass('hidden');
          }
        })
      }

      /**
       * Sets up direct metadata navigation for each input control
       * @param allMetadata metadata returned from api request
       */
      function setUpMetadataNavigation (allMetadata, webForms) {
        
        // Mdta functionality for controls on modal entity forms
        document.querySelectorAll('iframe').forEach( function (iFrameElement) {
          iFrameElement.onload = function () {  
            let iFrameBody = this.contentWindow.document.body;

            // Poll for iframe html repeatedly until the entity form control is rendered
            var myInterval = setInterval(function () {

              // Exit if there's not content at all on iframe
              if ($(iFrameBody).html() == ""){
                clearInterval(myInterval);
              }

              // Enter if Iframe is loading
              if ($(iFrameBody).find('#EntityFormControl_EntityFormView').html()){

                // Allow some time for all controls to load
                setTimeout(async function() {

                  // Set up Mdta logic for each control on focus and focusout events
                  $(iFrameBody).find('div.control input, div.control select').each((i,inputControl) => setUpMdtaButton(inputControl, allMetadata, true));        

                  let data = await PCNUtils.getData();
                  $('#malPcnComponentsTree').treeview({
                    data: PCNUtils.createComponentsTree(data),
                    enableLinks: true,
                    levels: 20,
                    showTags: true
                  });

                }, 100);
                clearInterval(myInterval);
              }
            }, 100);
          };
        })

        // Set up Mdta functionality for controls on non-modal forms
        $('div.control input, div.control select').each((i,inputControl) => setUpMdtaButton(inputControl, allMetadata, false, webForms));        
      }


      /**
       * Set up the created tree of components and the direct control metadata navigation
       */
      async function renderApp(){
        try {
          let data = await PCNUtils.getData();
          setUpMetadataNavigation(data.allMetadata, data.webForms);

          $('#malPcnComponentsTree').treeview({
            data: PCNUtils.createComponentsTree(data),
            enableLinks: true,
            levels: 20,
            showTags: true
          });
        } catch (err) {
          let customError = new Error(`${err.message} at function renderApp`);
          customError.name = err.name;          
          $('#malPcnComponentsTree').html(`
            <div class="alert alert-danger">
              <p>The tree of components failed to render due to the following error: </p> 
              </br>
              <p>Type: ${customError.name}</p>
              <p>Description:</p>
              <pre>${customError.message.replace(/ at /g, "\nat ")}</pre>
            </div>          
          `);
        }
      }

      renderApp();   

    </script>

    <style>
      #MAL-PCN-Modal-Body .treeview .list-group-item {
        cursor:pointer
      }
      #MAL-PCN-Modal-Body .treeview .badge {
        padding: 7px 7px !important;
        margin-top: -3px !important;
        border-radius: 5px !important;
      }
      #MAL-PCN-Modal-Body .treeview span.indent {
        margin-left:10px;
        margin-right:10px
      }
      #MAL-PCN-Modal-Body .treeview span.icon {
        width:12px;
        margin-right:5px
      }
      #MAL-PCN-Modal-Body .treeview .node-disabled {
        color:silver;
        cursor:not-allowed
      }
    </style>

{% endif %}
